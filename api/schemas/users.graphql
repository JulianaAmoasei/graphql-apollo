type User {
  id: ID!
  nome: String!
  ativo: Boolean!
  email: String!
  role: Role!
}

type Role {
  id: ID!
  type: RolesType!
}

enum RolesType {
  ESTUDANTE
  DOCENTE
  COORDENACAO
}

type Query {
  users: [User!]!
  user(id: ID!): User!
}

type Mutation {
  adicionaUser(user: UserInput): User!
  atualizaUser(id: ID!, user: UserInput): User!
  removeUser(id: ID!): ID!
}

# Input types can't have fields that are other objects, only basic scalar types, list types, and other input types.

input UserInput {
  nome: String
  ativo: Boolean
  email: String
  role: RolesType
}

# Do not use the same input type for both queries and mutations. In many cases, arguments that are required for a mutation are optional for a corresponding query.